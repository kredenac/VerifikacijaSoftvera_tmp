(1) Problem Description:

Redundant test cases are such test cases that when they are removed from the corpus,
the quality of testing results is not decreased. Formally, a test t is redundant with respect 
to a test suite S iff for each method execution produced by t, there exists an equivalent 
method executiuon of some test from S.
Why would we ever want to remove any valid tests?
Because continuous growth of test cases may affect the cost of maintenance and test execution.
Problem is exceptionally noticeable in open source projects. New tests are being added without
checking if some older tests become redundant. 

(2) System Architecture Description (description of basic implementation modules):

Main executable is written in c++. Its responsibility is to first parse project directory and find 
all test cases. 

Leveraging the power of Flex (lexer) and Yacc (parser) the component for extracting all test 
cases and their locations within files is robust to variatons in code formatting.
Actions for logging detected test cases are called within the parser.
Generated lexer/parser classes are constructed and used whilst recursively traversing directories 
starting from the given path.

Components for commenting and uncommenting tests are implemented as bash scripts because of their conciseness. 
They are evoked through the main executable.

Pythons easy and natural communication with other programs is used to do the following:
Compiling the project which is tested, running the generated executable, executing gcov to generate coverage,
and finally parsing gcovs coverage report and returning the result to main program.

"Redundant test finder" component uses all previous elements as an orchestrator.
By removing a test, analyzing coverage without it versus with it, it decides whether a given test is 
reduntant with respect to the whole test corpus.

(3) Solution Description (basic ideas, explanmation of key decisions, description of base algorithm)

Basic idea:
Find all test cases and turn them off one by one. Check if coverage is still the same 
without them, if it is then it doesn't contribute to our coverage metric, and therefore is redundant.

We have decided to use line coverage as the main metric for its straightforward interpretation and usage.
When implementing a solution to this problem it had to be decided on which testing framework to focus on.
Decision to use Qt Test was made because it is cross platform and our team members are comfortable 
with it. Decision to use gcov as coverage tool was made because it is a part of GNU ecosystem and 
is compatible with its compiler - gcc.

Base algorithm given as pseudocode:

getCoverage()
    compile project
    run tests
    generate coverage
    parse it and return metric

main()
    tests = {}

    for file in directory
        for test in file
            tests.add(test)

    baseline = getCoverage()

    for test in tests
        coverage = getCoverage()
        if coverage < baseline
            test.isRedundant = false
        else
            test.isRedundant = true
    
    print tests.filter(isRedundant)


Cons of described implementation:
- Line coverage is a very shallow criterion for deciding the real contribution or redundancy of a given test case.
- Recompiling for every test case doesn't scale well for large projects, especially if they have a lot of test cases.
- Highly dependant on a testing framework and programming language.

Pros of described implementation:
- Its free!
- Can be used with continious integration.
- No false negatives: if it doesn't flag a certain test as reduntant, then it definitely isn't.
- Intuitive interpretation of results.


